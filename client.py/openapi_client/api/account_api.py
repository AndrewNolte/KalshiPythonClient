"""
    Kalshi API.

    This documentation describes Kalshi's rest API for market makers  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.change_subscription_request import ChangeSubscriptionRequest
from openapi_client.model.get_notification_preferences_response import GetNotificationPreferencesResponse
from openapi_client.model.user_get_account_history_response import UserGetAccountHistoryResponse
from openapi_client.model.user_get_notifications_response import UserGetNotificationsResponse


class AccountApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __change_subscription(
            self,
            user_id,
            **kwargs
        ):
            """ChangeSubscription  # noqa: E501

            End-point for changing e-mail subscription mode for the current user.  This end-point is very useful for users that have a large volume of orders and don't want to be email notified whenever an order is submitted / edited / canceled or matches.  This is specially useful for Market Makers.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.change_subscription(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in

            Keyword Args:
                change_subscription_request (ChangeSubscriptionRequest): Change subscription data. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.change_subscription = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/subscribe',
                'operation_id': 'change_subscription',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'change_subscription_request',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'change_subscription_request':
                        (ChangeSubscriptionRequest,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'change_subscription_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__change_subscription
        )

        def __get_notification_preferences(
            self,
            user_id,
            **kwargs
        ):
            """GetNotificationPreferences  # noqa: E501

            End-point for getting e-mail subscription mode for the current user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_notification_preferences(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                GetNotificationPreferencesResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.get_notification_preferences = _Endpoint(
            settings={
                'response_type': (GetNotificationPreferencesResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/notifications/preferences',
                'operation_id': 'get_notification_preferences',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_notification_preferences
        )

        def __notification_mark_read(
            self,
            user_id,
            notification_id,
            **kwargs
        ):
            """NotificationMarkRead  # noqa: E501

            End-point for marking a notification as read.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  The value for the notification_id path parameter should match the notification_id value of the notification to be marked as read.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.notification_mark_read(user_id, notification_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): user_id should be filled with your user_id provided on log_in
                notification_id (str): notification_id should be filled with the id of the notification to be mark as read

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['notification_id'] = \
                notification_id
            return self.call_with_http_info(**kwargs)

        self.notification_mark_read = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/notifications/{notification_id}/read',
                'operation_id': 'notification_mark_read',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'notification_id',
                ],
                'required': [
                    'user_id',
                    'notification_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'notification_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'notification_id': 'notification_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'notification_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__notification_mark_read
        )

        def __user_get_account_history(
            self,
            user_id,
            **kwargs
        ):
            """UserGetAccountHistory  # noqa: E501

            End-point for getting the logged in user's important past actions and events related to the user's positions.  This contains entries for user's explicit actions but also for market events.  There will be entries for:  submitting, editing / canceling orders requesting deposits and withdrawals trade execution (order matching) market settlements on markets where you have a position  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_account_history(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in

            Keyword Args:
                should_return_deposits (bool): If true the response should include deposit entries. [optional]
                should_return_withdrawals (bool): If true the response should include withdrawal entries. [optional]
                should_return_orders (bool): If true the response should include order entries. [optional]
                should_return_settlements (bool): If true the response should include settlement entries. [optional]
                should_return_trades (bool): If true the response should include trade entries. [optional]
                limit (int): Restricts the response to a return the first \"limit\" amount of acct history items. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetAccountHistoryResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_get_account_history = _Endpoint(
            settings={
                'response_type': (UserGetAccountHistoryResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/account/history',
                'operation_id': 'user_get_account_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'should_return_deposits',
                    'should_return_withdrawals',
                    'should_return_orders',
                    'should_return_settlements',
                    'should_return_trades',
                    'limit',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'should_return_deposits':
                        (bool,),
                    'should_return_withdrawals':
                        (bool,),
                    'should_return_orders':
                        (bool,),
                    'should_return_settlements':
                        (bool,),
                    'should_return_trades':
                        (bool,),
                    'limit':
                        (int,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'should_return_deposits': 'ShouldReturnDeposits',
                    'should_return_withdrawals': 'ShouldReturnWithdrawals',
                    'should_return_orders': 'ShouldReturnOrders',
                    'should_return_settlements': 'ShouldReturnSettlements',
                    'should_return_trades': 'ShouldReturnTrades',
                    'limit': 'Limit',
                },
                'location_map': {
                    'user_id': 'path',
                    'should_return_deposits': 'query',
                    'should_return_withdrawals': 'query',
                    'should_return_orders': 'query',
                    'should_return_settlements': 'query',
                    'should_return_trades': 'query',
                    'limit': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_account_history
        )

        def __user_get_notifications(
            self,
            user_id,
            page_size,
            page_number,
            **kwargs
        ):
            """UserGetNotifications  # noqa: E501

            End-point for getting notifications for the current logged in user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_notifications(user_id, page_size, page_number, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in
                page_size (int): Number of results per page
                page_number (int): Page of the results

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetNotificationsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['page_size'] = \
                page_size
            kwargs['page_number'] = \
                page_number
            return self.call_with_http_info(**kwargs)

        self.user_get_notifications = _Endpoint(
            settings={
                'response_type': (UserGetNotificationsResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/notifications',
                'operation_id': 'user_get_notifications',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'page_size',
                    'page_number',
                ],
                'required': [
                    'user_id',
                    'page_size',
                    'page_number',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 50,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'page_size':
                        (int,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'page_size': 'page_size',
                    'page_number': 'page_number',
                },
                'location_map': {
                    'user_id': 'path',
                    'page_size': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_notifications
        )
