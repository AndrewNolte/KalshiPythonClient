"""
    Kalshi API.

    This documentation describes Kalshi's rest API for market makers  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kalshi.api_client import ApiClient, Endpoint as _Endpoint
from kalshi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kalshi.model.user_change_password_request import UserChangePasswordRequest
from kalshi.model.user_get_balance_response import UserGetBalanceResponse
from kalshi.model.user_get_market_position_response import UserGetMarketPositionResponse
from kalshi.model.user_get_market_positions_response import UserGetMarketPositionsResponse
from kalshi.model.user_get_profile_response import UserGetProfileResponse
from kalshi.model.user_get_watchlist_response import UserGetWatchlistResponse
from kalshi.model.user_order_create_request import UserOrderCreateRequest
from kalshi.model.user_order_create_response import UserOrderCreateResponse
from kalshi.model.user_order_decrease_request import UserOrderDecreaseRequest
from kalshi.model.user_order_decrease_response import UserOrderDecreaseResponse
from kalshi.model.user_orders_get_response import UserOrdersGetResponse
from kalshi.model.user_trades_get_response import UserTradesGetResponse


class UserApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __user_add_watchlist(
            self,
            user_id,
            market_id,
            **kwargs
        ):
            """UserAddWatchlist  # noqa: E501

            End-point for adding a market to the logged in user's watchlist.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  The value for the market_id path parameter should match the id value of the market to be added.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_add_watchlist(user_id, market_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): user_id should be filled with your user_id provided on log_in
                market_id (str): market_id should be filled with the id of the market to be added to the watchlist

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['market_id'] = \
                market_id
            return self.call_with_http_info(**kwargs)

        self.user_add_watchlist = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/watchlist/{market_id}',
                'operation_id': 'user_add_watchlist',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'market_id',
                ],
                'required': [
                    'user_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'market_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_add_watchlist
        )

        def __user_change_password(
            self,
            user_id,
            **kwargs
        ):
            """UserChangePassword  # noqa: E501

            End-point for updating logged-in user password.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_change_password(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in

            Keyword Args:
                user_change_password_request (UserChangePasswordRequest): Change password input fields.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_change_password = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/password',
                'operation_id': 'user_change_password',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'user_change_password_request',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'user_change_password_request':
                        (UserChangePasswordRequest,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'user_change_password_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__user_change_password
        )

        def __user_get_balance(
            self,
            user_id,
            **kwargs
        ):
            """UserGetBalance  # noqa: E501

            End-point for getting the balance of the logged in user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_balance(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetBalanceResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_get_balance = _Endpoint(
            settings={
                'response_type': (UserGetBalanceResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/balance',
                'operation_id': 'user_get_balance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_balance
        )

        def __user_get_market_position(
            self,
            user_id,
            market_id,
            **kwargs
        ):
            """UserGetMarketPosition  # noqa: E501

            End-point for getting the market positions for the logged in user, in a specific market.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  The value for the market_id path parameter should match the id value of the target market.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_market_position(user_id, market_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in
                market_id (str): Should be filled with the id of the target market

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetMarketPositionResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['market_id'] = \
                market_id
            return self.call_with_http_info(**kwargs)

        self.user_get_market_position = _Endpoint(
            settings={
                'response_type': (UserGetMarketPositionResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/positions/{market_id}',
                'operation_id': 'user_get_market_position',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'market_id',
                ],
                'required': [
                    'user_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'market_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_market_position
        )

        def __user_get_market_positions(
            self,
            user_id,
            **kwargs
        ):
            """UserGetMarketPositions  # noqa: E501

            End-point for getting all market positions for the logged in user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_market_positions(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetMarketPositionsResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_get_market_positions = _Endpoint(
            settings={
                'response_type': (UserGetMarketPositionsResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/positions',
                'operation_id': 'user_get_market_positions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_market_positions
        )

        def __user_get_profile(
            self,
            user_id,
            **kwargs
        ):
            """UserGetProfile  # noqa: E501

            End-point for retrieving the logged in user's profile.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_profile(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetProfileResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_get_profile = _Endpoint(
            settings={
                'response_type': (UserGetProfileResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}',
                'operation_id': 'user_get_profile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_profile
        )

        def __user_get_watchlist(
            self,
            user_id,
            **kwargs
        ):
            """UserGetWatchlist  # noqa: E501

            End-point for getting the market watchlist for the logged in user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_get_watchlist(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserGetWatchlistResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_get_watchlist = _Endpoint(
            settings={
                'response_type': (UserGetWatchlistResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/watchlist',
                'operation_id': 'user_get_watchlist',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_get_watchlist
        )

        def __user_order_cancel(
            self,
            user_id,
            order_id,
            **kwargs
        ):
            """UserOrderCancel  # noqa: E501

            End-point for canceling orders.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in). The value for the order_id should match the id field of the order you want to decrease. Commonly delete end-points return 204 status with no body content on success. But we can't completely delete the order, as it may be partially filled already. So what the delete end-point does is just reducing the order completely zeroing the remaining resting contracts on it. The zeroed order is returned on the response payload, as a form of validation for the client.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_order_cancel(user_id, order_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in
                order_id (str): This order_id should be filled with the id of the order to be decrease

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOrderDecreaseResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['order_id'] = \
                order_id
            return self.call_with_http_info(**kwargs)

        self.user_order_cancel = _Endpoint(
            settings={
                'response_type': (UserOrderDecreaseResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/orders/{order_id}',
                'operation_id': 'user_order_cancel',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'order_id',
                ],
                'required': [
                    'user_id',
                    'order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'order_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'order_id': 'order_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'order_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_order_cancel
        )

        def __user_order_create(
            self,
            user_id,
            **kwargs
        ):
            """UserOrderCreate  # noqa: E501

            End-point for submitting orders in a market.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_order_create(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in

            Keyword Args:
                user_order_create_request (UserOrderCreateRequest): Order create input data. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOrderCreateResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_order_create = _Endpoint(
            settings={
                'response_type': (UserOrderCreateResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/orders',
                'operation_id': 'user_order_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'user_order_create_request',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'user_order_create_request':
                        (UserOrderCreateRequest,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'user_order_create_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__user_order_create
        )

        def __user_order_decrease(
            self,
            user_id,
            order_id,
            **kwargs
        ):
            """UserOrderDecrease  # noqa: E501

            End-point for decreasing the number of contracts on orders. This is the only kind of edit we support on orders.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  The value for the order_id should match the id field of the order you want to decrease.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_order_decrease(user_id, order_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in
                order_id (str): This order_id should be filled with the id of the order to be decrease

            Keyword Args:
                user_order_decrease_request (UserOrderDecreaseRequest): Order data. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOrderDecreaseResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['order_id'] = \
                order_id
            return self.call_with_http_info(**kwargs)

        self.user_order_decrease = _Endpoint(
            settings={
                'response_type': (UserOrderDecreaseResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/orders/{order_id}/decrease',
                'operation_id': 'user_order_decrease',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'order_id',
                    'user_order_decrease_request',
                ],
                'required': [
                    'user_id',
                    'order_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'order_id':
                        (str,),
                    'user_order_decrease_request':
                        (UserOrderDecreaseRequest,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'order_id': 'order_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'order_id': 'path',
                    'user_order_decrease_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__user_order_decrease
        )

        def __user_orders_get(
            self,
            user_id,
            **kwargs
        ):
            """UserOrdersGet  # noqa: E501

            End-point for getting all orders for the logged in user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_orders_get(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in

            Keyword Args:
                market_id (str): Restricts the response to orders in a single market. [optional]
                is_yes (bool): Restricts the response to orders in a single direction (yes or no). [optional]
                min_price (int): Restricts the response to orders within a minimum price. [optional]
                max_price (int): Restricts the response to orders within a maximum price. [optional]
                min_place_count (int): Restricts the response to orders within a minimum place count. [optional]
                max_place_count (int): Restricts the response to orders within a maximum place count. [optional]
                min_initial_count (int): Restricts the response to orders within a minimum initial count. [optional]
                max_initial_count (int): Restricts the response to orders within a maximum initial count. [optional]
                min_remaining_count (int): Restricts the response to orders within a minimum remaining resting contracts count. [optional]
                max_remaining_count (int): Restricts the response to orders within a maximum remaining resting contracts count. [optional]
                min_date (datetime): Restricts the response to orders after a timestamp. [optional]
                max_date (datetime): Restricts the response to orders before a timestamp. [optional]
                get_queue_position (bool): If true, gets the queue placement for every resting order returned. [optional]
                status (str): Restricts the response to orders that have a certain status: resting, canceled, or executed. [optional]
                page_size (int): Parameter to specify the number of results per page. [optional]
                page_number (int): Parameter to specify which page of the results should be retrieved. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserOrdersGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_orders_get = _Endpoint(
            settings={
                'response_type': (UserOrdersGetResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/orders',
                'operation_id': 'user_orders_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'market_id',
                    'is_yes',
                    'min_price',
                    'max_price',
                    'min_place_count',
                    'max_place_count',
                    'min_initial_count',
                    'max_initial_count',
                    'min_remaining_count',
                    'max_remaining_count',
                    'min_date',
                    'max_date',
                    'get_queue_position',
                    'status',
                    'page_size',
                    'page_number',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'market_id':
                        (str,),
                    'is_yes':
                        (bool,),
                    'min_price':
                        (int,),
                    'max_price':
                        (int,),
                    'min_place_count':
                        (int,),
                    'max_place_count':
                        (int,),
                    'min_initial_count':
                        (int,),
                    'max_initial_count':
                        (int,),
                    'min_remaining_count':
                        (int,),
                    'max_remaining_count':
                        (int,),
                    'min_date':
                        (datetime,),
                    'max_date':
                        (datetime,),
                    'get_queue_position':
                        (bool,),
                    'status':
                        (str,),
                    'page_size':
                        (int,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'market_id': 'market_id',
                    'is_yes': 'is_yes',
                    'min_price': 'min_price',
                    'max_price': 'max_price',
                    'min_place_count': 'min_place_count',
                    'max_place_count': 'max_place_count',
                    'min_initial_count': 'min_initial_count',
                    'max_initial_count': 'max_initial_count',
                    'min_remaining_count': 'min_remaining_count',
                    'max_remaining_count': 'max_remaining_count',
                    'min_date': 'min_date',
                    'max_date': 'max_date',
                    'get_queue_position': 'get_queue_position',
                    'status': 'status',
                    'page_size': 'page_size',
                    'page_number': 'page_number',
                },
                'location_map': {
                    'user_id': 'path',
                    'market_id': 'query',
                    'is_yes': 'query',
                    'min_price': 'query',
                    'max_price': 'query',
                    'min_place_count': 'query',
                    'max_place_count': 'query',
                    'min_initial_count': 'query',
                    'max_initial_count': 'query',
                    'min_remaining_count': 'query',
                    'max_remaining_count': 'query',
                    'min_date': 'query',
                    'max_date': 'query',
                    'get_queue_position': 'query',
                    'status': 'query',
                    'page_size': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_orders_get
        )

        def __user_remove_watchlist(
            self,
            user_id,
            market_id,
            **kwargs
        ):
            """UserRemoveWatchlist  # noqa: E501

            End-point for removing a market from the logged in user's watchlist.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  The value for the market_id path parameter should match the id value of the market to be added.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_remove_watchlist(user_id, market_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): Should be filled with your user_id provided on log_in
                market_id (str): Should be filled with the id of the target market

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            kwargs['market_id'] = \
                market_id
            return self.call_with_http_info(**kwargs)

        self.user_remove_watchlist = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/watchlist/{market_id}',
                'operation_id': 'user_remove_watchlist',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'market_id',
                ],
                'required': [
                    'user_id',
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'market_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'market_id': 'market_id',
                },
                'location_map': {
                    'user_id': 'path',
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_remove_watchlist
        )

        def __user_trades_get(
            self,
            user_id,
            **kwargs
        ):
            """UserTradesGet  # noqa: E501

            End-point for getting all trades for the logged in user.  The value for the user_id path parameter should match the user_id value returned on the response for the last login request (POST /log_in).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.user_trades_get(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str): This parameter should be filled with your user_id provided on log_in

            Keyword Args:
                market_id (str): Restricts the response to trades in a specific market.. [optional]
                order_id (str): Restricts the response to trades related to a specific order.. [optional]
                min_price (int): Restricts the response to trades within a minimum price.. [optional]
                max_price (int): Restricts the response to trades within a maximum price.. [optional]
                min_count (int): Restricts the response to trades within a minimum contracts count.. [optional]
                max_count (int): Restricts the response to trades within a maximum contracts count.. [optional]
                min_date (datetime): Restricts the response to trades after a timestamp.. [optional]
                max_date (datetime): Restricts the response to trades before a timestamp.. [optional]
                page_size (int): Parameter to specify the number of results per page. [optional]
                page_number (int): Parameter to specify which page of the results should be retrieved. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserTradesGetResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.user_trades_get = _Endpoint(
            settings={
                'response_type': (UserTradesGetResponse,),
                'auth': [
                    'cookie'
                ],
                'endpoint_path': '/users/{user_id}/trades',
                'operation_id': 'user_trades_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'market_id',
                    'order_id',
                    'min_price',
                    'max_price',
                    'min_count',
                    'max_count',
                    'min_date',
                    'max_date',
                    'page_size',
                    'page_number',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                    'market_id':
                        (str,),
                    'order_id':
                        (str,),
                    'min_price':
                        (int,),
                    'max_price':
                        (int,),
                    'min_count':
                        (int,),
                    'max_count':
                        (int,),
                    'min_date':
                        (datetime,),
                    'max_date':
                        (datetime,),
                    'page_size':
                        (int,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'market_id': 'market_id',
                    'order_id': 'order_id',
                    'min_price': 'MinPrice',
                    'max_price': 'MaxPrice',
                    'min_count': 'MinCount',
                    'max_count': 'max_count',
                    'min_date': 'min_date',
                    'max_date': 'max_date',
                    'page_size': 'page_size',
                    'page_number': 'page_number',
                },
                'location_map': {
                    'user_id': 'path',
                    'market_id': 'query',
                    'order_id': 'query',
                    'min_price': 'query',
                    'max_price': 'query',
                    'min_count': 'query',
                    'max_count': 'query',
                    'min_date': 'query',
                    'max_date': 'query',
                    'page_size': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__user_trades_get
        )
